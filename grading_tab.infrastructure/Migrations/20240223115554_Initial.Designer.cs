// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using grading_tab.infrastructure;

#nullable disable

namespace grading_tab.infrastructure.Migrations
{
    [DbContext(typeof(GradingTabContext))]
    [Migration("20240223115554_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("grading_tab.domain.AggregateModels.AssessmentAggregate.AssessmentResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("AssessmentDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("Grade")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("TotalItems")
                        .HasColumnType("int");

                    b.Property<Guid>("_studentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StudentId");

                    b.Property<int>("_subjectId")
                        .HasColumnType("int")
                        .HasColumnName("SubjectId");

                    b.Property<int>("_termId")
                        .HasColumnType("int")
                        .HasColumnName("TermId");

                    b.Property<int>("_typeId")
                        .HasColumnType("int")
                        .HasColumnName("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("_studentId");

                    b.HasIndex("_subjectId");

                    b.HasIndex("_termId");

                    b.HasIndex("_typeId");

                    b.ToTable("assessment_result", "dbo");
                });

            modelBuilder.Entity("grading_tab.domain.AggregateModels.AssessmentAggregate.AssessmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("AssessmentType");
                });

            modelBuilder.Entity("grading_tab.domain.AggregateModels.AssessmentAggregate.Term", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Term");
                });

            modelBuilder.Entity("grading_tab.domain.AggregateModels.FacultyLoadAggregate.Meeting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<int>("EndTime")
                        .HasColumnType("int");

                    b.Property<int>("StartTime")
                        .HasColumnType("int");

                    b.Property<Guid?>("SubjectLoadId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("_typeId")
                        .HasColumnType("int")
                        .HasColumnName("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("SubjectLoadId");

                    b.HasIndex("_typeId");

                    b.ToTable("meeting", "dbo");
                });

            modelBuilder.Entity("grading_tab.domain.AggregateModels.FacultyLoadAggregate.MeetingType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("meeting_type", "dbo");
                });

            modelBuilder.Entity("grading_tab.domain.AggregateModels.PersonAggregate.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Middlename")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("SectionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("SectionId");

                    b.ToTable("person", "dbo");
                });

            modelBuilder.Entity("grading_tab.domain.AggregateModels.SectionAggregate.Section", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("section", "dbo");
                });

            modelBuilder.Entity("grading_tab.domain.AggregateModels.SectionAggregate.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("subject", "dbo");
                });

            modelBuilder.Entity("grading_tab.domain.AggregateModels.SectionAggregate.SubjectLoad", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FacultyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<Guid>("_facultyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("FacultyId");

                    b.Property<int>("_sectionId")
                        .HasColumnType("int")
                        .HasColumnName("SectionId");

                    b.Property<int>("_subjectId")
                        .HasColumnType("int")
                        .HasColumnName("SubjectId");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("_facultyId");

                    b.ToTable("subject_load", "dbo", t =>
                        {
                            t.Property("FacultyId")
                                .HasColumnName("FacultyId1");

                            t.Property("SubjectId")
                                .HasColumnName("SubjectId1");
                        });
                });

            modelBuilder.Entity("grading_tab.domain.AggregateModels.AssessmentAggregate.AssessmentResult", b =>
                {
                    b.HasOne("grading_tab.domain.AggregateModels.PersonAggregate.Person", "Student")
                        .WithMany()
                        .HasForeignKey("_studentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("grading_tab.domain.AggregateModels.SectionAggregate.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("_subjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("grading_tab.domain.AggregateModels.AssessmentAggregate.Term", "Term")
                        .WithMany()
                        .HasForeignKey("_termId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("grading_tab.domain.AggregateModels.AssessmentAggregate.AssessmentType", "Type")
                        .WithMany()
                        .HasForeignKey("_typeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Subject");

                    b.Navigation("Term");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("grading_tab.domain.AggregateModels.FacultyLoadAggregate.Meeting", b =>
                {
                    b.HasOne("grading_tab.domain.AggregateModels.SectionAggregate.SubjectLoad", null)
                        .WithMany("Meetings")
                        .HasForeignKey("SubjectLoadId");

                    b.HasOne("grading_tab.domain.AggregateModels.FacultyLoadAggregate.MeetingType", "Type")
                        .WithMany()
                        .HasForeignKey("_typeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("grading_tab.domain.AggregateModels.PersonAggregate.Person", b =>
                {
                    b.HasOne("grading_tab.domain.AggregateModels.SectionAggregate.Section", null)
                        .WithMany("Students")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("grading_tab.domain.AggregateModels.SectionAggregate.SubjectLoad", b =>
                {
                    b.HasOne("grading_tab.domain.AggregateModels.PersonAggregate.Person", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("grading_tab.domain.AggregateModels.SectionAggregate.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("grading_tab.domain.AggregateModels.SectionAggregate.Section", "Section")
                        .WithMany()
                        .HasForeignKey("_facultyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Faculty");

                    b.Navigation("Section");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("grading_tab.domain.AggregateModels.SectionAggregate.Section", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("grading_tab.domain.AggregateModels.SectionAggregate.SubjectLoad", b =>
                {
                    b.Navigation("Meetings");
                });
#pragma warning restore 612, 618
        }
    }
}
